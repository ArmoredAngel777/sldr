#!/usr/bin/python

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import os, sys, codecs
try :
    from sldr.ldml import Ldml
except ImportError :
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'lib')))
    from sldr.ldml import Ldml

from multiprocessing import Pool

if len(sys.argv) < 3 :
    print """cldrimport cldr_common_dir outdir"""
    sys.exit(1)

indir = sys.argv[1]
outdir = sys.argv[2]
subdirs = ('main', 'collation', 'casing', 'segments')

alllocales = set()
for s in subdirs :
    for l in os.listdir(os.path.join(indir, s)) :
        if l[-4:].lower() == '.xml' :
            alllocales.add(l[:-4])

def doit(a) :
    curr = None
    for s in subdirs :
        f = os.path.join(indir, s, a + '.xml')
        if os.path.exists(f) :
            l = Ldml(f)
            if curr is not None :
                curr.overlay(l)
            else :
                curr = l
    if curr is not None :
        curr.normalise()
        curr.add_id(draft = 'approved')
        outfh = codecs.open(os.path.join(outdir, a + '.xml'), "w", encoding="utf-8")
        curr.serialize_xml(outfh.write)
        outfh.close()

pool = Pool()
pool.map_async(doit, alllocales)
pool.close()
pool.join()
